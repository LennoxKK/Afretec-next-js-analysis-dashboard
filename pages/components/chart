import React, { useState, useRef, useEffect, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { FiSend, FiMessageSquare, FiDownload, FiTrendingUp, FiActivity,FiInfo } from 'react-icons/fi';
import { ChartComponent } from './ChartComponent';
import { TypingIndicator } from './TypingIndicator';
import html2canvas from 'html2canvas';
import { Message, ChartData } from '../src/types/chat';

interface ChatProps {
  messages: Message[];
  onSendMessage: (message: string) => Promise<void>;
  isLoading: boolean;
}

export const Chat: React.FC<ChatProps> = ({ messages, onSendMessage, isLoading }) => {
  const [input, setInput] = useState('');
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const [lastMessageTime, setLastMessageTime] = useState(0);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const chartCardRefs = useRef(new Map<string, HTMLDivElement>());
  const chartOnlyRefs = useRef(new Map<string, HTMLDivElement>());

  const uniqueMessages = React.useMemo(() => {
    const seen = new Set<string>();
    return messages.filter((msg) => {
      const identifier = `${msg.sender}-${msg.text}-${msg.timestamp?.getTime()}`;
      if (seen.has(identifier)) return false;
      seen.add(identifier);
      return true;
    });
  }, [messages]);

  const generateChartDescription = (chartData: ChartData): string => {
    const { chartType, data, diseases, variables, title } = chartData;
    let description = `${title}: `;

    if (chartType === 'pie') {
      description += `This pie chart displays the distribution of cases for ${diseases.join(' and ')} across ${variables.join(', ')} categories. `;
      diseases.forEach((disease) => {
        variables.forEach((variable) => {
          const entries = Object.entries(data[disease]?.[variable] || {});
          if (entries.length > 0) {
            description += `For ${disease}, the breakdown is: `;
            const total = entries.reduce((sum, [, value]) => sum + value, 0);
            description += entries
              .map(([category, value]) => `${category}: ${value} (${((value) / total * 100).toFixed(1)}%)`)
              .join(', ') + '. ';
          }
        });
      });
    } else if (chartType === 'bar' || chartType === 'line') {
      description += `This ${chartType} chart ${chartType === 'bar' ? 'compares' : 'shows the trend of'} cases for ${diseases.join(' and ')} across ${variables.join(', ')} categories. `;
      variables.forEach((variable) => {
        const categories = new Set<string>();
        diseases.forEach((disease) => {
          Object.keys(data[disease]?.[variable] || {}).forEach((category) => categories.add(category));
        });
        Array.from(categories).forEach((category) => {
          description += `${category}: `;
          diseases.forEach((disease) => {
            const value = data[disease]?.[variable]?.[category] || 0;
            if (value > 0) description += `${disease} - ${value} cases, `;
          });
        });
      });
    }
    return description.trim().replace(/,\s*$/, '.');
  };

  const handleDownload = async (
    refMap: React.MutableRefObject<Map<string, HTMLDivElement>>,
    messageId: string,
    filename: string
  ) => {
    try {
      const ref = refMap.current.get(messageId);
      if (!ref) {
        console.error(`No element found for messageId: ${messageId}`);
        return;
      }

      const canvas = await html2canvas(ref, {
        scale: 2,
        useCORS: true,
        backgroundColor: '#ffffff',
        logging: false,
      });

      const dataUrl = canvas.toDataURL('image/png');
      const link = document.createElement('a');
      link.href = dataUrl;
      link.download = `${filename.replace(/\s+/g, '_')}_Chart.png`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    } catch (error) {
      console.error('Error generating chart download:', error);
    }
  };

  const handleSend = useCallback(
    async (e: React.FormEvent) => {
      e.preventDefault();
      if (!input.trim() || isLoading || isSubmitting) return;

      const trimmedInput = input.trim();
      const now = Date.now();

      if (now - lastMessageTime < 500) return;

      const lastMessage = uniqueMessages[uniqueMessages.length - 1];
      if (
        lastMessage &&
        lastMessage.text === trimmedInput &&
        lastMessage.sender === 'user' &&
        now - lastMessage.timestamp.getTime() < 2000
      ) {
        return;
      }

      setIsSubmitting(true);
      setLastMessageTime(now);

      try {
        await onSendMessage(trimmedInput);
        setInput('');
      } catch (error) {
        console.error('Error sending message:', error);
      } finally {
        setIsSubmitting(false);
      }
    },
    [input, isLoading, isSubmitting, lastMessageTime, uniqueMessages, onSendMessage]
  );

  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSend(e);
    }
  };

  const formatTime = (date?: Date): string => {
    return date ? date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : '';
  };

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [uniqueMessages]);

  useEffect(() => {
    const validMessageIds = new Set(uniqueMessages.map((msg) => msg.id));
    chartCardRefs.current.forEach((_, id) => {
      if (!validMessageIds.has(id)) {
        chartCardRefs.current.delete(id);
        chartOnlyRefs.current.delete(id);
      }
    });
  }, [uniqueMessages]);

  return (
    <div className="flex flex-col h-screen bg-gray-50 text-gray-900">
      {/* Compact Header
      <div className="bg-white border-b border-gray-200 px-6 py-3">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-blue-600 to-purple-600 flex items-center justify-center">
              <FiActivity className="w-4 h-4 text-white" />
            </div>
            <h1 className="text-lg font-semibold text-gray-800">Health Analytics</h1>
          </div>
          <div className="flex items-center space-x-2 text-sm text-gray-500">
            <span>{new Date().toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}</span>
          </div>
        </div>
      </div> */}

      {/* Main Chat Container */}
      <div className="flex-1 overflow-y-auto p-4 md:p-6 bg-gray-50">
        <div className="max-w-6xl mx-auto space-y-4">
          {uniqueMessages.length === 0 ? (
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, ease: "easeOut" }}
              className="flex flex-col items-center justify-center h-full text-center py-16 px-4"
            >
          <div className="flex flex-col items-center justify-center h-full p-6">
            {/* Animated Logo */}
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              transition={{ duration: 0.4 }}
              className="w-24 h-24 rounded-xl bg-gradient-to-br from-blue-600 to-indigo-600 flex items-center justify-center shadow-lg mb-6"
            >
              <FiTrendingUp className="w-10 h-10 text-white" />
            </motion.div>
            
            {/* Title with fade-in */}
            <motion.h3
              initial={{ y: 10, opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
              transition={{ delay: 0.1, duration: 0.3 }}
              className="text-2xl font-semibold text-gray-900 mb-3 text-center"
            >
              Health Data Analytics Dashboard
            </motion.h3>
            
            {/* Description */}
            <motion.p
              initial={{ y: 10, opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
              transition={{ delay: 0.2, duration: 0.3 }}
              className="text-gray-700 max-w-lg leading-relaxed mb-8 text-center text-base"
            >
              Transform disease data into actionable insights with AI-powered analytics.
            </motion.p>
            
            {/* Example Queries Grid */}
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.3, duration: 0.3 }}
              className="grid grid-cols-1 md:grid-cols-2 gap-3 w-full max-w-3xl"
            >
              {[
                "Show malaria incidence by age group as stacked bars for 2023",
                "Compare dengue and chikungunya cases by month in Southeast Asia",
                "Display COVID-19 vaccination rates by country on a world map",
                "Plot tuberculosis mortality trends over the last decade",
                "Analyze HIV prevalence by gender and age bracket",
                "Visualize pneumonia hospitalization rates by season"
              ].map((example, index) => (
                <motion.div
                  key={index}
                  whileHover={{ y: -2 }}
                  whileTap={{ scale: 0.98 }}
                  className="p-3 bg-white rounded-lg border border-gray-200 hover:border-blue-300 cursor-pointer transition-all group"
                  onClick={() => {
                    setInput(example);
                    // Auto-focus the input if available in your implementation
                    document.getElementById('chat-input')?.focus();
                  }}
                >
                  <div className="flex items-start">
                    <div className="bg-blue-100 p-1.5 rounded-md mr-3 group-hover:bg-blue-200 transition-colors">
                      <FiMessageSquare className="text-blue-600 w-4 h-4" />
                    </div>
                    <p className="text-sm text-gray-800 group-hover:text-gray-900 transition-colors">
                      {example}
                    </p>
                  </div>
                </motion.div>
              ))}
            </motion.div>

            {/* Pro Tip */}
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.4, duration: 0.3 }}
              className="mt-6 flex items-center text-sm text-gray-500"
            >
              <FiInfo className="mr-2 text-blue-500" />
              <span>Click any example to populate the query</span>
            </motion.div>
          </div>
            </motion.div>
          ) : (
            <AnimatePresence mode="popLayout">
              {uniqueMessages.map((msg, index) => {
                const isUser = msg.sender === 'user';
                const isChart = msg.type === 'chart';
                const isTyping = msg.type === 'typing';
                const uniqueKey = msg.id || `${msg.sender}-${msg.timestamp?.getTime() || Date.now()}-${index}`;

                let processedMsg = msg;
                if (msg.type === 'text' && (msg.text.trim().startsWith('{') || msg.text.trim().startsWith('['))) {
                  try {
                    const parsedData = JSON.parse(msg.text) as ChartData;
                    if (parsedData.chartType && parsedData.diseases && parsedData.variables) {
                      processedMsg = {
                        ...msg,
                        type: 'chart',
                        chartData: parsedData,
                        text: `📊 Generated visualization: ${parsedData.title}`,
                      };
                    }
                  } catch (e) {
                    console.error('JSON parsing error:', e);
                  }
                }

                return (
                  <motion.div
                    key={uniqueKey}
                    layout
                    initial={{ opacity: 0, y: 20, scale: 0.98 }}
                    animate={{ opacity: 1, y: 0, scale: 1 }}
                    exit={{ opacity: 0, y: -20, scale: 0.98 }}
                    transition={{ duration: 0.25, ease: "easeOut" }}
                    className={`flex ${isUser ? 'justify-end' : 'justify-start'}`}
                  >
                    <div
                      className={`max-w-[90%] lg:max-w-4xl ${
                        isUser
                          ? 'bg-blue-700 text-white rounded-xl rounded-br-sm shadow-md'
                          : isChart
                          ? 'bg-white rounded-xl shadow-sm border border-gray-100 w-full'
                          : 'bg-white rounded-xl rounded-bl-sm shadow-sm border border-gray-100'
                      }`}
                      aria-live={isTyping ? "polite" : "off"}
                    >
                      {isTyping ? (
                        <div className="p-4">
                          <TypingIndicator />
                        </div>
                      ) : isChart && processedMsg.chartData ? (
                        <div 
                          ref={(el) => { if (el) chartCardRefs.current.set(uniqueKey, el); }}
                          className="overflow-hidden"
                        >
                          <div className="p-4 bg-gray-50 border-b border-gray-100 flex justify-between items-center rounded-t-xl">
                            <div className="flex items-center space-x-3">
                              <div className="w-7 h-7 rounded-md bg-blue-600 flex items-center justify-center">
                                <FiTrendingUp className="w-3.5 h-3.5 text-white" />
                              </div>
                              <h4 className="text-sm font-semibold text-gray-800">
                                {processedMsg.chartData.title}
                              </h4>
                            </div>
                            <motion.button
                              onClick={() => handleDownload(chartCardRefs, uniqueKey, `${processedMsg.chartData?.title}_Card`)}
                              whileHover={{ scale: 1.05 }}
                              whileTap={{ scale: 0.98 }}
                              className="p-1.5 rounded-md bg-white text-gray-600 hover:bg-gray-100 transition-colors"
                              aria-label={`Download ${processedMsg.chartData?.title} chart card`}
                            >
                              <FiDownload size={14} />
                            </motion.button>
                          </div>
                          <div className="p-4">
                            <p className="text-sm text-gray-700 mb-3 leading-relaxed">
                              {generateChartDescription(processedMsg.chartData)}
                            </p>
                            <div className="relative bg-white rounded-lg border border-gray-100 p-3 shadow-xs">
                              <div ref={(el) => { if (el) chartOnlyRefs.current.set(uniqueKey, el); }}>
                                <ChartComponent data={processedMsg.chartData} />
                              </div>
                              <motion.button
                                onClick={() => handleDownload(chartOnlyRefs, uniqueKey, `${processedMsg.chartData?.title}_Chart`)}
                                whileHover={{ scale: 1.05 }}
                                whileTap={{ scale: 0.98 }}
                                className="absolute top-2 right-2 p-1.5 rounded-md bg-white shadow-xs text-gray-600 hover:text-gray-800 transition-colors"
                                aria-label={`Download ${processedMsg.chartData?.title} chart`}
                              >
                                <FiDownload size={12} />
                              </motion.button>
                            </div>
                          </div>
                          <div className="px-4 py-2.5 bg-gray-50 text-xs text-gray-500 flex justify-between items-center rounded-b-xl border-t border-gray-100">
                            <time dateTime={processedMsg.timestamp?.toISOString()}>
                              {formatTime(processedMsg.timestamp)}
                            </time>
                            <span className="font-medium text-gray-600">Health Analytics Engine</span>
                          </div>
                        </div>
                      ) : (
                        <div className="p-4">
                          <p className={`text-sm ${isUser ? 'text-white' : 'text-gray-800'}`}>
                            {processedMsg.text}
                          </p>
                          <div className={`text-xs mt-1.5 ${isUser ? 'text-blue-100' : 'text-gray-500'}`}>
                            <time dateTime={processedMsg.timestamp?.toISOString()}>
                              {formatTime(processedMsg.timestamp)}
                            </time>
                          </div>
                        </div>
                      )}
                    </div>
                  </motion.div>
                );
              })}
            </AnimatePresence>
          )}
          <div ref={messagesEndRef} aria-hidden="true" />
        </div>
      </div>

      {/* Input Area */}
      <div className="bg-white border-t border-gray-200 sticky bottom-0 z-10">
  <motion.div
    initial={{ y: 20, opacity: 0 }}
    animate={{ y: 0, opacity: 1 }}
    transition={{ duration: 0.4 }}
    className="max-w-6xl mx-auto px-4 py-3"
  >
    <form onSubmit={handleSend} className="relative">
      <div className="relative bg-white rounded-xl border border-gray-300 hover:border-gray-400 transition-colors">
        <textarea
          id="chat-input"
          rows={1}
          value={input}
          onChange={(e) => setInput(e.target.value)}
          onKeyDown={handleKeyDown}
          disabled={isLoading || isSubmitting}
          className="w-full p-3 pr-12 bg-transparent border-0 focus:ring-0 resize-none text-sm text-gray-900 placeholder-gray-500 disabled:opacity-50 rounded-xl focus:outline-none"
          placeholder={isLoading || isSubmitting ? 'Processing...' : 'Request a visualization or ask about health data...'}
          aria-label="Message input"
          style={{ 
            minHeight: '44px', 
            maxHeight: '120px',
            boxShadow: 'none'
          }}
        />
        <button
          type="submit"
          disabled={!input.trim() || isLoading || isSubmitting}
          className={`absolute right-2 top-1/2 transform -translate-y-1/2 p-2 rounded-lg ${
            input.trim() && !isLoading && !isSubmitting
              ? 'bg-blue-600 text-white hover:bg-blue-700'
              : 'bg-gray-200 text-gray-400 cursor-not-allowed'
          }`}
          aria-label="Send message"
        >
          <FiSend size={14} />
        </button>
      </div>
    </form>
  </motion.div>
</div>

    </div>
  );
};