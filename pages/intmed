// app/components/Dashboard.tsx
'use client';
import {  AnimatePresence } from "framer-motion";
import React, { useState, useEffect, useCallback } from 'react';
import { BarChart, Bar, LineChart, Line, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { toPng } from 'html-to-image';
import { motion } from 'framer-motion';

// Interface for chat messages
interface ChatMessage {
  type: 'user' | 'bot';
  content: 'text' | 'typing' | 'analysis' | 'charts';
  timestamp: string;
  text?: string;
  analysis?: {
    correlation: number;
    pValue: number;
    significance: string;
    recommendation: string;
  };
  charts?: ChartConfig[];
  description?: string;
}

// Interface for chart configuration
interface ChartConfig {
  type: 'bar' | 'line' | 'pie';
  variable: string;
  data: Array<{ name: string; [key: string]: number | string }> | PieChartData[];
  diseases?: string[];
  title: string;
  disease?: string;
}

// Interface for summary data
interface Summary {
  totalDiseases: number;
  totalResponders: number;
  diseases: Array<{
    id: string | number;
    name: string;
    description?: string;
  }>;
  totalResponses: number;
}

// Interface for chart generation config
interface ChartGenerationConfig {
  diseases: string[];
  variables: string[];
  chartTypes?: string[];
}

// Interface for chart data from API
interface ChartData {
  diseases: {
    [disease: string]: {
      [variable: string]: { [category: string]: number };
    };
  };
  summary?: {
    correlation: number;
    pValue: number;
    significance: string;
    [key: string]: unknown;
  };
}

// Interface for API response
interface AnalyticsApiResponse {
  [disease: string]: {
    [variable: string]: { [category: string]: number };
  } | { summary: ChartData['summary'] };
}

// Interface for pie chart data
interface PieChartData {
  name: string;
  value: number;
}

const Dashboard: React.FC = () => {
  const [query, setQuery] = useState('');
  const [loading, setLoading] = useState(false);
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([]);
  const [isAnimating, setIsAnimating] = useState(false);
  const [summary, setSummary] = useState<Summary | null>(null);
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const [activeTab, setActiveTab] = useState<'home' | 'chat' | 'guide'>('home');
  const [expandedDiseaseId, setExpandedDiseaseId] = useState(null);

 

  const colors = [
    '#1f77b4', // blue
    '#ff7f0e', // orange
    '#2ca02c', // green
    '#d62728', // red
    '#9467bd', // purple
    '#8c564b', // brown
    '#e377c2', // pink
    '#7f7f7f', // gray
    '#bcbd22', // yellow-green
    '#17becf', // cyan
  ];
  

  // Toggle sidebar
  const toggleSidebar = () => {
    setIsSidebarOpen(!isSidebarOpen);
  };

  // Fetch summary data
  useEffect(() => {
    const fetchSummary = async () => {
      try {
        const res = await fetch('/api/data?type=summary');
        if (!res.ok) throw new Error('Failed to fetch summary data');
        const json = await res.json();
        setSummary(json.data);
      } catch (err) {
        console.error('Error loading summary:', err);
        setSummary({
          totalDiseases: 0,
          totalResponders: 0,
          diseases: [],
          totalResponses: 0,
        });
      }
    };
    fetchSummary();
  }, []);

  // Generate chart data from API
  const generateChartData = async (config: ChartGenerationConfig): Promise<ChartData> => {
    const { diseases, variables } = config;
    if (diseases.length === 0 || variables.length === 0) {
      return { diseases: {}, summary: undefined };
    }
    try {
      const response = await fetch(`/api/data?type=analytics&diseases=${encodeURIComponent(diseases.join(','))}`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' },
      });
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to fetch analytics data');
      }
      const { data }: { data: AnalyticsApiResponse | null } = await response.json();
      if (!data || typeof data !== 'object') {
        return { diseases: {}, summary: undefined };
      }
      const diseaseEntries = Object.entries(data).filter(([key]) => key !== 'summary');
      const diseasesData: ChartData['diseases'] = diseaseEntries.reduce((acc, [disease, value]) => {
        if (typeof value === 'object' && value !== null && !('summary' in value)) {
          acc[disease] = value as { [variable: string]: { [category: string]: number } };
        }
        return acc;
      }, {} as ChartData['diseases']);
      let summaryData: ChartData['summary'] = undefined;
      if ('summary' in data && data.summary && typeof data.summary === 'object' && !Array.isArray(data.summary)) {
        const potentialSummary: { [key: string]: unknown } = data.summary;
        if (
          'correlation' in potentialSummary &&
          typeof potentialSummary.correlation === 'number' &&
          'pValue' in potentialSummary &&
          typeof potentialSummary.pValue === 'number' &&
          'significance' in potentialSummary &&
          typeof potentialSummary.significance === 'string'
        ) {
          summaryData = {
            correlation: potentialSummary.correlation,
            pValue: potentialSummary.pValue,
            significance: potentialSummary.significance,
            ...Object.fromEntries(
              Object.entries(potentialSummary).filter(([key]) => !['correlation', 'pValue', 'significance'].includes(key))
            ),
          };
          console.log(summaryData)
        }
      }
      return { diseases: diseasesData, summary: summaryData };
    } catch (error) {
      console.error('Error generating chart data:', error);
      return { diseases: {}, summary: undefined };
    }
  };

  // Create chart configuration
  const createChartConfig = (data: ChartData, config: ChartGenerationConfig): ChartConfig[] => {
    const { diseases, variables, chartTypes } = config;
    const charts: ChartConfig[] = [];
    if (!data.diseases || Object.keys(data.diseases).length === 0) {
      return charts;
    }
    chartTypes?.forEach((chartType: string) => {
      variables.forEach((variable: string) => {
        const chartData: Array<{ name: string; [key: string]: number | string }> = [];
        const categories = diseases.length > 0 && diseases[0] in data.diseases && data.diseases[diseases[0]][variable]
          ? Object.keys(data.diseases[diseases[0]][variable])
          : [];
        categories.forEach((category: string) => {
          const dataPoint: { name: string; [key: string]: number | string } = { name: category };
          diseases.forEach((disease: string) => {
            if (disease in data.diseases && data.diseases[disease][variable]?.[category] !== undefined) {
              dataPoint[disease] = data.diseases[disease][variable][category] || 0;
            }
          });
          chartData.push(dataPoint);
        });
        if (chartType === 'pie') {
          diseases.forEach((disease: string) => {
            if (disease in data.diseases && data.diseases[disease][variable]) {
              const pieData: PieChartData[] = Object.entries(data.diseases[disease][variable]).map(([key, value]) => ({
                name: key,
                value: value as number,
              }));
              charts.push({
                type: chartType,
                variable,
                disease,
                data: pieData,
                title: `${disease.charAt(0).toUpperCase() + disease.slice(1)} Distribution by ${variable.charAt(0).toUpperCase() + variable.slice(1)}`,
              });
            }
          });
        } else {
          charts.push({
            type: chartType as 'bar' | 'line',
            variable,
            data: chartData,
            diseases,
            title: `${variable.charAt(0).toUpperCase() + variable.slice(1)} Distribution by Disease (${chartType.charAt(0).toUpperCase() + chartType.slice(1)} Chart)`,
          });
        }
      });
    });
    return charts;
  };

  // Analyze query with AI
  const analyzeQuery = async (query: string) => {
    try {
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            message: `Correct and clarify this user query for a disease data visualization dashboard. Ensure it's suitable for extracting specific diseases, variables (like survey questions), and chart types. Only return the corrected and clear query without explanation:
          "${query}"`,
          }),
          
      });
      if (!response.ok) throw new Error(`API request failed with status ${response.status}`);
      const data = await response.json();
      return data.reply || query;
    } catch (error) {
      console.error('Error analyzing query:', error);
      return query;
    }
  };

  // Parse query with AI
  const parseQueryWithAI = async (query: string) => {
    try {
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            message: `From the following query, extract a JSON object with arrays of "diseases", "variables", and "chartTypes". Ensure variables are included if mentioned. Respond only with JSON:
          "${query}"`,
            isJSONRequest: true,
          }),
          
      });
      if (!response.ok) throw new Error(`API request failed with status ${response.status}`);
      const data = await response.json();
      let jsonString = typeof data.reply === 'string' ? data.reply : JSON.stringify(data.reply);
      jsonString = jsonString.replace(/```json|```/g, '').trim();
      const parsed = typeof jsonString === 'string' ? JSON.parse(jsonString) : jsonString;
      return {
            diseases: Array.isArray(parsed.diseases) ? parsed.diseases : [],
            variables: Array.isArray(parsed.variables) ? parsed.variables : [],
            chartTypes: Array.isArray(parsed.chartTypes) && parsed.chartTypes.length > 0
              ? parsed.chartTypes
              : ['bar'],
          };
          
    } catch (error) {
      console.error('Error parsing query with AI:', error);
      return { diseases: [], variables: [], chartTypes: ['bar'] };
    }
  };

  // Get AI response for general questions
  const getAIResponse = async (query: string) => {
    try {
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            message: `The user asked: "${query}". 
          If this is a general question about disease data (not requesting specific charts), provide a helpful general response.
          If it includes requests for specific variables, focus the response on those variables.`,
          }),
          
      });
      const data = await response.json();
      return data.reply || 'I could not generate a response. Please try again.';
    } catch (error) {
      console.error('Error getting AI response:', error);
      return 'Sorry, there was an error generating a response.';
    }
  };

  // Generate description with AI
  const generateDescriptionWithAI = async (config: ChartGenerationConfig, data: ChartData): Promise<string> => {
    try {
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: `Generate a concise description for this data visualization:
            Diseases: ${config.diseases.join(', ')}
            Variables: ${config.variables.join(', ')}
            Chart Types: ${config.chartTypes?.join(', ') ?? 'bar'}
            Data Summary: ${JSON.stringify(data.summary ?? {})}`,
        }),
      });
      const result = await response.json();
      return result.reply || '';
    } catch (error) {
      console.error('Error generating description:', error);
      return '';
    }
  };

  // Simulate chat with animations
  const simulateChat = useCallback(async () => {
    setLoading(true);
    setIsAnimating(true);
    setChatMessages([]);

    const userQuery = query.trim() || "Show me the correlation between Malaria, Cholera and age/gender using bar and line charts";

    setTimeout(() => {
      setChatMessages([{
        type: 'user',
        content: 'text',
        text: userQuery,
        timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
      }]);
    }, 500);

    setTimeout(() => {
      setChatMessages((prev) => [...prev, {
        type: 'bot',
        content: 'typing',
        timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
      }]);
    }, 1500);

    try {
      const analyzedQuery = await analyzeQuery(userQuery);
      const config = await parseQueryWithAI(analyzedQuery);

      if (config.diseases.length === 0 && config.variables.length === 0) {
        const aiResponse = await getAIResponse(analyzedQuery);
        setTimeout(() => {
          setChatMessages((prev) => prev.map((msg) =>
            msg.content === 'typing'
              ? { ...msg, content: 'text', text: aiResponse }
              : msg
          ));
        }, 3000);
      } else {
        const data = await generateChartData(config);
        if (data) {
          const charts = createChartConfig(data, config);
          const desc = await generateDescriptionWithAI(config, data);

          setTimeout(() => {
            setChatMessages((prev) => prev.map((msg) =>
              msg.content === 'typing'
                ? {
                    ...msg,
                    content: 'analysis',
                    analysis: {
                      correlation: data.summary?.correlation || 0.72,
                      pValue: data.summary?.pValue || 0.003,
                      significance: data.summary?.significance || 'High',
                      recommendation: desc || 'Strong correlation detected between age groups and disease prevalence',
                    },
                  }
                : msg
            ));
          }, 3000);

          setTimeout(() => {
            setChatMessages((prev) => [...prev, {
              type: 'bot',
              content: 'charts',
              charts,
              description: desc,
              timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
            }]);
          }, 4000);
        } else {
          setTimeout(() => {
            setChatMessages((prev) => prev.map((msg) =>
              msg.content === 'typing'
                ? {
                    ...msg,
                    content: 'text',
                    text: 'Sorry, I could not generate the requested visualization. Please check your query and try again.',
                  }
                : msg
            ));
          }, 3000);
        }
      }
    } catch (error) {
      console.error('Error:', error);
      setTimeout(() => {
        setChatMessages((prev) => prev.map((msg) =>
          msg.content === 'typing'
            ? {
                ...msg,
                content: 'text',
                text: 'Sorry, there was an error processing your request. Please try again later.',
              }
            : msg
        ));
      }, 3000);
    }

    setLoading(false);
    setTimeout(() => setIsAnimating(false), 4500);
  }, [query]);

  // Auto-play animation on mount
  useEffect(() => {
    const timer = setTimeout(() => {
      simulateChat();
    }, 1000);
    return () => clearTimeout(timer);
  }, [simulateChat]);

  // Restart animation every 5 minutes
  useEffect(() => {
    const interval = setInterval(() => {
      if (!loading) {
        simulateChat();
      }
    }, 300000);
    return () => clearInterval(interval);
  }, [loading, simulateChat]);

  // Download chart
  const downloadChart = async (chartId: string, fileName: string) => {
    const chartElement = document.getElementById(chartId);
    if (!chartElement) return;
    try {
      const dataUrl = await toPng(chartElement);
      const link = document.createElement('a');
      link.download = `${fileName}.png`;
      link.href = dataUrl;
      link.click();
    } catch (error) {
      console.error('Error downloading chart:', error);
    }
  };

  // Render chart
  const isPieChartData = (data: ChartConfig['data']): data is PieChartData[] => {
    return Array.isArray(data) && data.every((item) => 'name' in item && 'value' in item && typeof item.value === 'number');
  };

  const renderChart = (chart: ChartConfig, index: number) => {
    const chartId = `chart-${index}-${Date.now()}`;
    const fileName = chart.title.replace(/[^a-z0-9]/gi, '_').toLowerCase();
    let ChartComponent: React.ReactElement;

    if (chart.type === 'bar') {
      ChartComponent = (
        <BarChart data={chart.data as Array<{ name: string; [key: string]: number | string }>} >
          <CartesianGrid strokeDasharray="3 3" stroke="var(--neutral-accent)" />
          <XAxis dataKey="name" fontSize={12} stroke="var(--neutral-text)" />
          <YAxis fontSize={12} stroke="var(--neutral-text)" />
          <Tooltip contentStyle={{ backgroundColor: 'var(--neutral-bg)', border: '1px solid var(--neutral-accent)', borderRadius: '8px', fontSize: '14px' }} />
          <Legend />
          {chart.diseases?.map((disease: string, idx: number) => (
            <Bar
              key={disease}
              dataKey={disease}
              fill={colors[idx % colors.length]}
              name={`${disease.charAt(0).toUpperCase() + disease.slice(1)} Cases`}
              radius={[0, 0, 0, 0]}
            />
          ))}
        </BarChart>
      );
    } else if (chart.type === 'line') {
      ChartComponent = (
        <LineChart data={chart.data as Array<{ name: string; [key: string]: number | string }>} >
          <CartesianGrid strokeDasharray="3 3" stroke="var(--neutral-accent)" />
          <XAxis dataKey="name" fontSize={12} stroke="var(--neutral-text)" />
          <YAxis fontSize={12} stroke="var(--neutral-text)" />
          <Tooltip contentStyle={{ backgroundColor: 'var(--neutral-bg)', border: '1px solid var(--neutral-accent)', borderRadius: '8px', fontSize: '10px' }} />
          <Legend />
          {chart.diseases?.map((disease: string, idx: number) => (
            <Line
              key={disease}
              type="monotone"
              dataKey={disease}
              stroke={colors[idx % colors.length]}
              strokeWidth={3}
              name={`${disease.charAt(0).toUpperCase() + disease.slice(1)} Cases`}
              dot={{ fill: colors[idx % colors.length], strokeWidth: 2, r: 4 }}
            />
          ))}
        </LineChart>
      );
    } else if (chart.type === 'pie') {
      if (!isPieChartData(chart.data)) return null;
      ChartComponent = (
        <PieChart>
          <Pie
            data={chart.data}
            cx="50%"
            cy="50%"
            innerRadius={40}
            outerRadius={80}
            dataKey="value"
            label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
            labelLine={false}
          >
            {chart.data.map((entry: PieChartData, index: number) => (
              <Cell key={`cell-${index}`} fill={colors[index % colors.length]} />
            ))}
          </Pie>
          <Tooltip contentStyle={{ backgroundColor: 'var(--neutral-bg)', border: '1px solid var(--neutral-accent)', borderRadius: '8px', fontSize: '14px' }} />
          <Legend />
        </PieChart>
      );
    } else {
      return null;
    }

    return (
      <div key={index} className="bg-[var(--neutral-bg)] p-4 rounded-xl border border-[var(--neutral-accent)]">
        <div className="flex justify-between items-center mb-4">
          <h4 className="font-medium text-[var(--neutral-text)]">{chart.title}</h4>
          <div
            onClick={() => downloadChart(chartId, fileName)}
            className="p-2 rounded-full hover:bg-[var(--primary-light)] cursor-pointer transition-colors"
            title="Download Chart"
          >
            <svg className="h-5 w-5 text-[var(--neutral-text)] hover:text-[var(--primary)] transition-colors" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clipRule="evenodd" />
            </svg>
          </div>
        </div>
        <div id={chartId}>
          <ResponsiveContainer width="100%" height={200}>
            {ChartComponent}
          </ResponsiveContainer>
        </div>
      </div>
    );
  };

  // Typing indicator component
  const TypingIndicator = () => (
    <div className="flex items-center space-x-1 p-3">
      <div className="flex space-x-1">
        {[0, 1, 2].map((i) => (
          <div
            key={i}
            className="w-2 h-2 bg-[var(--primary)] rounded-full animate-bounce"
            style={{ animationDelay: `${i * 0.2}s` }}
          />
        ))}
      </div>
      <span className="text-sm text-[var(--neutral-text)] ml-2">Analyzing data...</span>
    </div>
  );

  // Chat message component
  const ChatMessage = ({ message, index }: { message: ChatMessage; index: number }) => {
    const isUser = message.type === 'user';
    return (
      <div
        className={`flex ${isUser ? 'justify-end' : 'justify-start'} mb-6 animate-fadeInUp`}
        style={{ animationDelay: `${index * 0.2}s` }}
      >
        <div className={`max-w-4xl ${isUser ? 'order-2' : 'order-1'}`}>
          <div className={`flex items-end space-x-3 ${isUser ? 'flex-row-reverse space-x-reverse' : ''}`}>
            <div className={`w-10 h-10 rounded-full flex items-center justify-center shadow-lg ${
              isUser ? 'bg-[var(--primary)]' : 'bg-[var(--neutral-text)]'
            }`}>
              {isUser ? (
                <svg className="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clipRule="evenodd" />
                </svg>
              ) : (
                <svg className="w-5 h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M12.316 3.051a1 1 0 01.633 1.265l-4 12a1 1 0 11-1.898-.632l4-12a1 1 0 011.265-.633zM5.707 6.293a1 1 0 010 1.414L3.414 10l2.293 2.293a1 1 0 11-1.414 1.414l-3-3a1 1 0 010-1.414l3-3a1 1 0 011.414 0zm8.586 0a1 1 0 011.414 0l3 3a1 1 0 010 1.414l-3 3a1 1 0 11-1.414-1.414L16.586 10l-2.293-2.293a1 1 0 010-1.414z" clipRule="evenodd" />
                </svg>
              )}
            </div>
            <div className={`rounded-2xl px-6 py-4 shadow-lg backdrop-blur-sm ${
              isUser
                ? 'bg-[var(--primary)] text-white'
                : 'bg-[var(--neutral-bg)] border border-[var(--neutral-accent)] text-[var(--neutral-text)]'
            }`}>
              {message.content === 'typing' ? (
                <TypingIndicator />
              ) : message.content === 'analysis' && message.analysis ? (
                <div className="space-y-4">
                  <div className="flex items-center space-x-2 mb-3">
                    <div className="w-2 h-2 bg-[var(--primary-light)] rounded-full animate-pulse"></div>
                    <span className="font-semibold text-lg">Analysis Complete</span>
                  </div>
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div className="bg-[var(--primary-light)] p-3 rounded-lg">
                      <div className="font-medium text-[var(--primary-dark)]">Correlation</div>
                      <div className="text-2xl font-bold text-[var(--primary)]">{message.analysis.correlation}</div>
                    </div>
                    <div className="bg-[var(--primary-light)] p-3 rounded-lg">
                      <div className="font-medium text-[var(--primary-dark)]">P-Value</div>
                      <div className="text-2xl font-bold text-[var(--primary)]">{message.analysis.pValue}</div>
                    </div>
                  </div>
                  <div className="bg-[var(--primary-light)] p-3 rounded-lg">
                    <div className="font-medium text-[var(--primary-dark)] mb-1">Key Insight</div>
                    <div className="text-sm text-[var(--neutral-text)]">{message.analysis.recommendation}</div>
                  </div>
                </div>
              ) : message.content === 'charts' && message.charts ? (
                <div className="space-y-6">
                  <div className="text-lg font-semibold mb-4 flex items-center">
                    <svg className="w-5 h-5 mr-2 text-[var(--primary)]" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z" />
                    </svg>
                    Visual Analysis
                  </div>
                  {message.description && (
                    <div className="bg-[var(--neutral-bg)] p-4 rounded-lg border border-[var(--neutral-accent)]">
                      <h4 className="font-medium text-[var(--neutral-text)] mb-2">Visualization Description</h4>
                      <p className="text-[var(--neutral-text)] text-sm">{message.description}</p>
                    </div>
                  )}
                  <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    {message.charts.map((chart: ChartConfig, idx: number) => renderChart(chart, idx))}
                  </div>
                </div>
              ) : message.content === 'text' && message.text ? (
                <div className="text-sm leading-relaxed">{message.text}</div>
              ) : (
                <div className="text-sm leading-relaxed">{message.content}</div>
              )}
              <div className={`text-xs mt-2 opacity-70 ${isUser ? 'text-white' : 'text-[var(--neutral-accent)]'}`}>
                {message.timestamp}
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Handle submit
  const handleSubmit = () => {
    simulateChat();
  };

  return (
    <div className="min-h-screen bg-[var(--neutral-bg)] flex">
      {/* Mobile Header */}
{/* Mobile Header */}
<div className="md:hidden fixed top-0 left-0 right-0 bg-[var(--neutral-bg)] shadow-md z-50 flex items-center justify-between px-4 py-3">
  <button
    className="p-2 rounded-full hover:bg-[var(--primary-light)]"
    onClick={toggleSidebar}
  >
    <svg className="w-6 h-6 text-[var(--primary)]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
    </svg>
  </button>
  <div className="flex items-center">
    <svg className="w-8 h-8 text-[var(--primary)]" viewBox="0 0 100 100" fill="currentColor">
      <path d="M20 30 L40 50 L20 70 L30 70 L50 50 L30 30 Z M50 30 L70 50 L50 70 L60 70 L80 50 L60 30 Z" />
      <text x="10" y="90" fontSize="20" fontFamily="Arial, sans-serif" fill="currentColor">Afretec</text>
    </svg>
  </div>
  <div className="w-6"></div> {/* Spacer for alignment */}
</div>

{/* Sidebar */}
<div className={`fixed inset-y-0 left-0 w-64 bg-[var(--neutral-bg)] shadow-xl transform transition-transform duration-300 ease-in-out z-40 ${
  isSidebarOpen ? 'translate-x-0' : '-translate-x-full'
} md:translate-x-0 md:sticky md:top-0 md:h-screen md:shadow-none`}>
  <div className="flex items-center justify-between p-4 border-b border-[var(--neutral-accent)]">
    <h2 className="text-xl font-bold text-[var(--neutral-text)]">Dashboard</h2>
    <button
      className="md:hidden p-2 rounded-full hover:bg-[var(--primary-light)]"
      onClick={toggleSidebar}
    >
      <svg className="w-6 h-6 text-[var(--primary)]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
  </div>
  <nav className="mt-4">
    <button
      className={`w-full flex items-center px-4 py-3 text-sm font-medium transition-colors ${
        activeTab === 'home'
          ? 'bg-[var(--primary-light)] text-[var(--primary)] border-l-4 border-[var(--primary)]'
          : 'text-[var(--primary)] hover:bg-[var(--primary-light)] hover:text-[var(--primary-dark)]'
      }`}
      onClick={() => {
        setActiveTab('home');
        setIsSidebarOpen(false);
      }}
    >
      <svg className="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
      </svg>
      Home
    </button>
    <button
      className={`w-full flex items-center px-4 py-3 text-sm font-medium transition-colors ${
        activeTab === 'chat'
          ? 'bg-[var(--primary-light)] text-[var(--primary)] border-l-4 border-[var(--primary)]'
          : 'text-[var(--primary)] hover:bg-[var(--primary-light)] hover:text-[var(--primary-dark)]'
      }`}
      onClick={() => {
        setActiveTab('chat');
        setIsSidebarOpen(false);
      }}
    >
      <svg className="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z" />
      </svg>
      Chat
    </button>
    <button
      className={`w-full flex items-center px-4 py-3 text-sm font-medium transition-colors ${
        activeTab === 'guide'
          ? 'bg-[var(--primary-light)] text-[var(--primary)] border-l-4 border-[var(--primary)]'
          : 'text-[var(--primary)] hover:bg-[var(--primary-light)] hover:text-[var(--primary-dark)]'
      }`}
      onClick={() => {
        setActiveTab('guide');
        setIsSidebarOpen(false);
      }}
    >
      <svg className="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5s3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18s-3.332.477-4.5 1.253" />
      </svg>
      Guide
    </button>
  </nav>
</div>

{/* Mobile Sidebar Overlay */}
{isSidebarOpen && (
  <div
    className="fixed inset-0 bg-black bg-opacity-50 z-30 md:hidden"
    onClick={toggleSidebar}
  />
)}

      {/* Mobile Sidebar Overlay */}
      {isSidebarOpen && (
        <div
          className="fixed inset-0 bg-black bg-opacity-50 z-40 md:hidden"
          onClick={toggleSidebar}
        />
      )}

      {/* Main Content */}
      <div className="flex-1 container mx-auto px-4 py-8 pt-20 md:pt-8">
        {activeTab === 'home' && (
            <>
                {/* Clean Header */}
                <motion.div
  initial={{ opacity: 0, y: 20 }}
  animate={{ opacity: 1, y: 0 }}
  transition={{ duration: 0.6, ease: "easeOut" }}
  className="mb-12"
>
  <div className="relative">
    {/* Glassmorphism panel */}
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ delay: 0.3, duration: 0.4 }}
      className="absolute inset-0 bg-white/30 backdrop-blur-md rounded-xl -z-10"
      style={{
        boxShadow: "0 4px 20px rgba(0,0,0,0.08)",
        border: "1px solid rgba(255,255,255,0.3)"
      }}
    />

    <div className="px-6 py-8 text-center">
      <motion.h1
        initial={{ opacity: 0, y: 10 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.2, duration: 0.5 }}
        className="text-3xl md:text-4xl font-bold text-gray-800 mb-3 tracking-tight"
        style={{ fontFamily: "'Inter', sans-serif" }}
      >
        Disease Surveillance <span className="text-blue-600">Dashboard</span>
      </motion.h1>

      <motion.div
        initial={{ scaleX: 0 }}
        animate={{ scaleX: 1 }}
        transition={{ delay: 0.4, duration: 0.6 }}
        className="w-16 h-1 bg-gradient-to-r from-blue-400 to-blue-300 mx-auto mb-4 rounded-full"
      />

      <motion.p
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.5, duration: 0.5 }}
        className="text-gray-600 max-w-2xl mx-auto text-lg leading-relaxed"
        style={{ fontFamily: "'Inter', sans-serif" }}
      >
        <span className="font-medium text-gray-700">Real-time monitoring</span> and analysis of disease patterns with{" "}
        <span className="font-medium text-gray-700">actionable insights</span>
      </motion.p>
    </div>
  </div>
</motion.div>

            {/* Modern Animated Stats Cards */}
        {summary && (
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-12">
            {[
            {
                title: "Tracked Diseases",
                value: summary.totalDiseases,
                icon: (
                <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z" />
                </svg>
                ),
                trend: { value: "+2%", positive: true },
                color: "bg-blue-50"
            },
            {
                title: "Active Responders",
                value: summary.totalResponders,
                icon: (
                <svg className="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
                </svg>
                ),
                trend: { value: "-1%", positive: false },
                color: "bg-purple-50"
            },
            {
                title: "Ongoing Surveys",
                value: summary.diseases?.length || 0,
                icon: (
                <svg className="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                ),
                trend: { value: "3 active", neutral: true },
                color: "bg-green-50"
            },
            {
                title: "Total Responses",
                value: summary.totalResponses,
                icon: (
                <svg className="w-6 h-6 text-amber-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                ),
                trend: { value: "+5%", positive: true },
                color: "bg-amber-50"
            }
            ].map((stat, index) => (
            <motion.div
                key={index}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3, delay: index * 0.1 }}
                whileHover={{ y: -3 }}
                className={`p-5 rounded-2xl border border-gray-100 shadow-sm hover:shadow-md transition-all bg-white`}
            >
                <div className="flex justify-between items-start">
                <div className={`p-3 rounded-xl ${stat.color}`}>
                    {stat.icon}
                </div>
                <span className={`text-xs font-medium px-2 py-1 rounded-full ${
                    stat.trend?.positive
                    ? 'bg-green-100 text-green-800'
                    : stat.trend?.neutral
                    ? 'bg-gray-100 text-gray-800'
                    : 'bg-red-100 text-red-800'
                }`}>
                    {stat.trend?.value}
                </span>
                </div>

                <div className="mt-5">
                <h4 className="text-sm text-gray-500 font-medium">{stat.title}</h4>
                <p className="text-3xl font-bold text-gray-900 mt-1">
                    {stat.value.toLocaleString()}
                </p>
                </div>

                <div className="mt-4 pt-4 border-t border-dashed border-gray-200">
                <div className="text-xs text-gray-400 flex items-center space-x-1">
                    <svg className="w-3.5 h-3.5" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                    </svg>
                    <span>Last 30 days</span>
                </div>
                </div>
            </motion.div>
            ))}
        </div>
        )}


            {summary?.diseases && (
            <section className="bg-white p-10 rounded-3xl border border-gray-200 shadow-2xl max-w-7xl mx-auto transition-all duration-300">
                <header className="flex justify-between items-center mb-12">
                <motion.h2
                    initial={{ opacity: 0, y: 16 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.5, ease: "easeOut" }}
                    className="text-4xl font-bold text-gray-900 tracking-tight"
                >
                    Disease Surveillance Dashboard
                </motion.h2>
                <motion.span
                    initial={{ opacity: 0, scale: 0.95 }}
                    animate={{ opacity: 1, scale: 1 }}
                    transition={{ duration: 0.4, ease: "easeOut", delay: 0.1 }}
                    className="text-sm font-semibold bg-blue-100 text-blue-800 px-5 py-2 rounded-full"
                >
                    {summary.diseases.length} {summary.diseases.length > 1 ? "Diseases" : "Disease"}
                </motion.span>
                </header>

                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
                {summary.diseases.map((disease, index) => (
                    <motion.div
                    key={disease.id}
                    initial={{ opacity: 0, y: 40 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.6, ease: "easeOut", delay: index * 0.1 }}
                    whileHover={{ scale: 1.015 }}
                    className="bg-white border border-gray-100 rounded-2xl shadow-sm p-6 flex flex-col transition-all"
                    >
                    <div className="flex items-start gap-4">
                        <div className="bg-blue-100 text-blue-600 p-3 rounded-xl">
                        <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                        </svg>
                        </div>
                        <div className="flex-1">
                        <h3 className="text-xl font-semibold text-gray-900 capitalize">{disease.name}</h3>
                        <p className="text-sm text-gray-600 mt-1 line-clamp-2">
                            {disease.description || "This condition is under active monitoring."}
                        </p>
                        </div>
                    </div>

                    <div className="mt-auto pt-4 border-t border-gray-100 flex justify-between items-center">
                        <span className="text-xs text-gray-500">Updated: {new Date().toLocaleDateString()}</span>
                        <motion.button
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                        onClick={() => setExpandedDiseaseId(expandedDiseaseId === disease.id ? null : disease.id)}
                        className="flex items-center text-sm text-blue-600 hover:text-blue-800 font-medium focus:outline-none"
                        >
                        {expandedDiseaseId === disease.id ? "Show less" : "Show more"}
                        <motion.svg
                            className="w-4 h-4 ml-1"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                            animate={{ rotate: expandedDiseaseId === disease.id ? 180 : 0 }}
                            transition={{ duration: 0.25 }}
                        >
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                        </motion.svg>
                        </motion.button>
                    </div>

                    <AnimatePresence initial={false}>
                        {expandedDiseaseId === disease.id && (
                        <motion.div
                            key="details"
                            initial={{ height: 0, opacity: 0 }}
                            animate={{ height: "auto", opacity: 1 }}
                            exit={{ height: 0, opacity: 0 }}
                            transition={{ duration: 0.4, ease: "easeInOut" }}
                            className="overflow-hidden mt-6"
                        >
                            <h4 className="text-md font-medium text-gray-800 mb-2">Detailed Overview</h4>
                            <p className="text-sm text-gray-700 leading-relaxed">
                            {disease.description ||
                                "In-depth insights on symptoms, current developments, and mitigation protocols."}
                            </p>
                            <div className="mt-4 flex flex-wrap gap-2">
                            <span className="text-xs px-3 py-1 bg-green-100 text-green-800 rounded-full font-medium">Active</span>
                            <span className="text-xs px-3 py-1 bg-blue-100 text-blue-800 rounded-full font-medium">Monitoring</span>
                            <span className="text-xs px-3 py-1 bg-gray-100 text-gray-700 rounded-full font-medium">
                                Last checked: {new Date().toLocaleTimeString()}
                            </span>
                            </div>
                        </motion.div>
                        )}
                    </AnimatePresence>
                    </motion.div>
                ))}
                </div>
            </section>
            )}


            </>
            )}

        {activeTab === 'chat' && (
          <div id="chat" className="bg-[var(--neutral-bg)] backdrop-blur-lg rounded-3xl shadow-xl border border-[var(--neutral-accent)] flex flex-col overflow-hidden" style={{ height: 'calc(100vh - 4rem)' }}>
            <div className="px-6 py-4 bg-[var(--primary)] text-white rounded-t-3xl">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <div className={`w-3 h-3 rounded-full ${isAnimating ? 'bg-[var(--primary-light)] animate-pulse' : 'bg-[var(--neutral-accent)]'}`}></div>
                  <h3 className="font-semibold">AI Data Analyst</h3>
                </div>
                <div className="text-sm opacity-75">Live Analysis</div>
              </div>
            </div>
            <div className="flex-1 overflow-y-auto p-6 space-y-4">
              {chatMessages.length === 0 ? (
                <div className="flex items-center justify-center h-full text-[var(--neutral-text)]">
                  <div className="text-center">
                    <svg className="w-16 h-16 mx-auto mb-4 text-[var(--neutral-accent)]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth="1"
                        d="M5 3h14a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2V5a2 2 0 012-2zm2 6h10m-5-4v8m-7-3l2-2m0 0l2 2"
                      />
                    </svg>
                    <p className="text-lg font-medium">Ready for Analysis</p>
                    <p className="text-sm">Submit your query to see the AI in action</p>
                  </div>
                </div>
              ) : (
                chatMessages.map((message, index) => (
                  <ChatMessage key={index} message={message} index={index} />
                ))
              )}
            </div>
            <div className="p-6 border-t border-[var(--neutral-accent)]">
              <div className="relative">
                <textarea
                  value={query}
                  onChange={(e) => setQuery(e.target.value)}
                  placeholder="e.g., Show correlation between Malaria, Cholera and age/gender using bar and line charts"
                  className="w-full px-6 pr-28 py-4 rounded-2xl border-2 border-[var(--neutral-accent)] focus:border-[var(--primary)] bg-[var(--neutral-bg)] focus:bg-white text-[var(--neutral-text)] transition-all duration-300 resize-none placeholder:text-[var(--neutral-accent)] outline-none"
                  rows={2}
                />
                <button
                  onClick={handleSubmit}
                  disabled={loading}
                  className="absolute right-4 top-1/2 -translate-y-1/2 bg-[var(--primary)] hover:bg-[var(--primary-dark)] disabled:opacity-50 text-white font-semibold py-2 px-4 rounded-xl shadow-lg hover:shadow-xl transition-all duration-300"
                >
                  {loading ? (
                    <span className="flex items-center">
                      <svg
                        className="animate-spin -ml-1 mr-2 h-4 w-4 text-white"
                        fill="none"
                        viewBox="0 0 24 24"
                      >
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path
                          className="opacity-75"
                          fill="currentColor"
                          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                        ></path>
                      </svg>
                      Processing...
                    </span>
                  ) : (
                    <span className="flex items-center">
                      <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                      </svg>
                      Analyze
                    </span>
                  )}
                </button>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'guide' && (
          <div id="settings" className="bg-[var(--neutral-bg)] rounded-xl shadow-lg p-6 border border-[var(--neutral-accent)] transform transition-all hover:scale-[1.01] hover:shadow-xl">
            <h2 className="text-2xl font-bold text-[var(--neutral-text)] mb-6 flex items-center">
              <svg
                className="w-6 h-6 text-[var(--primary)] mr-2 animate-pulse"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
              </svg>
              How to Use This Tool
            </h2>
            <div className="space-y-4 text-[var(--neutral-text)]">
              <div className="p-4 bg-[var(--primary-light)] rounded-lg animate-fade-in group relative">
                <div className="absolute top-3 right-3 opacity-0 group-hover:opacity-100 transition-opacity">
                  <button
                    onClick={() => navigator.clipboard.writeText('Show correlation between Malaria, Cholera and age/gender using bar and line charts')}
                    className="text-xs flex items-center px-2 py-1 bg-[var(--neutral-bg)]/90 rounded-md border border-[var(--neutral-accent)] shadow-sm hover:bg-[var(--primary-light)] transition-all"
                  >
                    <svg className="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3"
                      />
                    </svg>
                    Copy
                  </button>
                </div>
                <h3 className="font-semibold text-[var(--primary-dark)] mb-2 flex items-center">
                  <svg className="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                    <path
                      fillRule="evenodd"
                      d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2h-1V9z"
                      clipRule="evenodd"
                    />
                  </svg>
                  Data Visualization
                </h3>
                <p className="text-[var(--neutral-text)]">
                  Include diseases (<span className="font-medium">malaria, cholera, heat stress</span>), variables (
                  <span className="font-medium">age, gender, season</span>), and chart types (
                  <span className="font-medium">bar, line, pie</span>) in your query.
                </p>
                <div className="mt-3 p-3 bg-[var(--neutral-bg)] rounded-md border border-[var(--neutral-accent)] animate-pulse-slow flex justify-between items-center">
                  <p className="text-sm font-mono text-[var(--primary)]">
                    <span className="text-[var(--neutral-text)]">Example:</span> "Show correlation between Malaria, Cholera and age/gender using bar and line charts"
                  </p>
                  <button
                    onClick={() => navigator.clipboard.writeText('Show correlation between Malaria, Cholera and age/gender using bar and line charts')}
                    className="text-xs flex items-center px-2 py-1 ml-2 bg-[var(--primary-light)] rounded border border-[var(--neutral-accent)] hover:bg-[var(--primary)] transition-colors"
                  >
                    <svg className="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3"
                      />
                    </svg>
                    Copy
                  </button>
                </div>
              </div>
              <div className="p-4 bg-[var(--primary-light)] rounded-lg animate-fade-in delay-100">
                <h3 className="font-semibold text-[var(--primary-dark)] mb-2 flex items-center">
                  <svg className="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                  </svg>
                  General Questions
                </h3>
                <p className="text-[var(--neutral-text)]">Ask any question about the data or diseases. The system will analyze available information and provide insights.</p>
              </div>
              <div className="p-4 bg-[var(--primary-light)] rounded-lg animate-fade-in delay-200">
                <h3 className="font-semibold text-[var(--primary-dark)] mb-3 flex items-center">
                  <svg className="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                    <path
                      fillRule="evenodd"
                      d="M6 2a2 2 0 00-2 2v12a2 2 0 002 2h8a2 2 0 002-2V4a2 2 0 00-2-2H6zm1 2a1 1 0 000 2h6a1 1 0 100-2H7zm6 7a1 1 0 011 1v3a1 1 0 11-2 0v-3a1 1 0 011-1zm-3 3a1 1 0 100 2h.01a1 1 0 100-2H10zm-4 1a1 1 0 011-1h.01a1 1 0 110 2H7a1 1 0 01-1-1zm1-4a1 1 0 100 2h.01a1 1 0 100-2H7zm2 1a1 1 0 011-1h.01a1 1 0 110 2H10a1 1 0 01-1-1zm4-4a1 1 0 100 2h.01a1 1 0 100-2H13zM9 9a1 1 0 011-1h.01a1 1 0 110 2H10a1 1 0 01-1-1zM7 8a1 1 0 000 2h.01a1 1 0 000-2H7z"
                      clipRule="evenodd"
                    />
                  </svg>
                  Variables Explained
                </h3>
                <ul className="space-y-2">
                  <li className="flex items-start">
                    <span className="inline-block bg-[var(--neutral-bg)] p-1 rounded-full mr-2 border border-[var(--neutral-accent)]">
                      <svg className="w-3 h-3 text-[var(--primary)]" fill="currentColor" viewBox="0 0 20 20">
                        <circle cx="10" cy="10" r="5" />
                      </svg>
                    </span>
                    <span><strong className="text-[var(--neutral-text)]">Age:</strong> Above 35 years vs Below 35 years</span>
                  </li>
                  <li className="flex items-start">
                    <span className="inline-block bg-[var(--neutral-bg)] p-1 rounded-full mr-2 border border-[var(--neutral-accent)]">
                      <svg className="w-3 h-3 text-[var(--primary)]" fill="currentColor" viewBox="0 0 20 20">
                        <circle cx="10" cy="10" r="5" />
                      </svg>
                    </span>
                    <span><strong className="text-[var(--neutral-text)]">Gender:</strong> Male vs Female</span>
                  </li>
                  <li className="flex items-start">
                    <span className="inline-block bg-[var(--neutral-bg)] p-1 rounded-full mr-2 border border-[var(--neutral-accent)]">
                      <svg className="w-3 h-3 text-[var(--primary)]" fill="currentColor" viewBox="0 0 20 20">
                        <circle cx="10" cy="10" r="5" />
                      </svg>
                    </span>
                    <span><strong className="text-[var(--neutral-text)]">Season:</strong> Rainy Season (April-October) vs Dry Season (November-March)</span>
                  </li>
                </ul>
              </div>
            </div>
          </div>
        )}

        <style jsx global>{`
          :root {
            --primary: #3B82F6;
            --primary-light: #BFDBFE;
            --primary-dark: #1D4ED8;
            --neutral-bg: #F9FAFB;
            --neutral-text: #1F2A44;
            --neutral-accent: #D1D5DB;
          }

          @keyframes fadeInUp {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
          }
          .animate-fadeInUp { animation: fadeInUp 0.6s ease-out forwards; }
          @keyframes fade-in { from { opacity: 0; } to { opacity: 1; } }
          .animate-fade-in { animation: fade-in 0.5s ease-out; }
          .delay-100 { animation-delay: 0.1s; }
          .delay-200 { animation-delay: 0.2s; }
          @keyframes pulse-slow { 0% { opacity: 1; } 50% { opacity: 0.7; } 100% { opacity: 1; } }
          .animate-pulse-slow { animation: pulse-slow 2s infinite; }

  
        `}</style>
      </div>
    </div>
  );
};

export default Dashboard;